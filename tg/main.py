from fastapi import FastAPI
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
import aiohttp
import os
from dotenv import load_dotenv
from db.database import SessionLocal
from db.models import User

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("TG_API_TOKEN")
MAIN_URL = os.getenv("MAIN_URL")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –∏ Telegram Application ===
app = FastAPI()
telegram_app = Application.builder().token(BOT_TOKEN).build()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π: tg_id ‚Üí {photo_path, matched_id, user_id}
tg_sessions = {}

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        token = context.args[0]
        session = SessionLocal()
        user = session.query(User).filter(User.telegram_link_token == token).first()
        if user:
            user.telegram_id = update.effective_user.id
            user.telegram_link_token = None
            session.commit()
            await update.message.reply_text("‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω.")
        else:
            await update.message.reply_text("‚õî –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
        session.close()
    else:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == tg_id).first()
    if not user:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ Telegram —á–µ—Ä–µ–∑ —Å–∞–π—Ç.")
        session.close()
        return

    # 1. –°–æ–æ–±—â–µ–Ω–∏–µ ¬´–û–∂–∏–¥–∞–π—Ç–µ...¬ª
    await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    # 2. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    file = await context.bot.get_file(update.message.photo[-1].file_id)
    os.makedirs("tg_uploads", exist_ok=True)
    local_path = f"tg_uploads/{file.file_unique_id}.jpg"
    await file.download_to_drive(local_path)

    # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ FastAPI
    async with aiohttp.ClientSession() as sess:
        with open(local_path, "rb") as f:
            data = aiohttp.FormData()
            data.add_field("file", f, filename="photo.jpg", content_type="image/jpeg")
            data.add_field("user_id", str(user.id))

            async with sess.post(f"{MAIN_URL}/tg_recognize", data=data) as resp:
                result = await resp.json()
    user.face_searches += 1
    session.close()

    if not result.get("matched"):
        await update.message.reply_text("‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    match = result["matched"]
    tg_sessions[tg_id] = {
        "photo_path": result["input_photo"],
        "matched_id": match["id"],
        "user_id": user.id,
    }

    # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —ç—Ç–æ –æ–Ω(–∞)", callback_data="yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç, –Ω–µ –æ–Ω(–∞)", callback_data="no"),
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    with open(os.path.join("known_faces", os.path.basename(match["photo_url"])), "rb") as photo:
        await context.bot.send_photo(
            chat_id=tg_id,
            photo=photo,
            caption=f"–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ {match['name']} ({match['similarity']}%)",
            reply_markup=markup,
        )


async def decision_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    tg_id = update.effective_user.id
    data = tg_sessions.get(tg_id)
    if not data:
        await query.edit_message_text("‚õî –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ë–î
    session = SessionLocal()
    user = session.query(User).filter(User.id == data["user_id"]).first()
    if not user:
        await query.edit_message_text("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        session.close()
        return

    if not update.message.photo:
        await update.message.reply_text("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ –≤–∏–¥–µ–æ).")
        session.close()
        return
    
    if query.data == "yes":
        user.confirmed_matches += 1
    elif query.data == "no":
        user.rejected_matches += 1
    session.commit()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    async with aiohttp.ClientSession() as sess:
        payload = {
            "user_id": str(data["user_id"]),
            "input_path": data["photo_path"],
            "matched_id": str(data["matched_id"]),
            "decision": query.data,
        }
        await sess.post(f"{MAIN_URL}/recognize_decision", data=payload)

    await query.edit_message_caption(
            caption=query.message.caption + "\n\n‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—á—Ç—ë–Ω.",
            reply_markup=None
        )
    
    tg_sessions.pop(tg_id, None)
    session.close()

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == tg_id).first()

    if not user:
        await update.message.reply_text("‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü—Ä–∏–≤—è–∂–∏—Ç–µ Telegram —á–µ—Ä–µ–∑ —Å–∞–π—Ç.")
        session.close()
        return

    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"üîó VisualFacePro: {MAIN_URL}\n"
        f"üë®‚Äçüíº –ò–º—è: {user.first_name} {user.last_name}\n"
        f"üìß Email: {user.email}\n"
        f"üõ°Ô∏è –†–æ–ª—å: {user.role}\n"
        f"üóìÔ∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {str(user.created_at).split('.')[0][:16]}\n"
        f"üÜî –í–∞—à ID: {user.telegram_id}\n"
        f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"  ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {user.confirmed_matches}\n"
        f"  ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {user.rejected_matches}\n"
        f"  üîç –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {user.face_searches}"
    )

    await update.message.reply_text(text, parse_mode="HTML")
    session.close()

async def show_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "‚ÑπÔ∏è –¢–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç ‚Äî VisualFacePro\n"
        "–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏—Ü –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö (–≤ –±—É–¥—É—â–µ–º ‚Äî –∏ –≤–∏–¥–µ–æ) –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ –ª–∏—Ü–∞.\n\n"
        "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
        "‚Ä¢ –¢–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞ —Å—á—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –ª–∏—Ü–∞\n"
        "‚Ä¢ –ë–æ–ª—å—à–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏\n\n"
        "–°–æ–∑–¥–∞–Ω–æ:\n"
        f"‚Ä¢ –ë–æ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —Å–∞–π—Ç—É: {MAIN_URL}\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π\n\—Ç"
        "–°–æ–∑–¥–∞–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏:\n"
        "‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç: –î–ì–¢–£\n"
        "‚Ä¢ –§–∞–∫—É–ª—å—Ç–µ—Ç: –ò–∏–í–¢\n"
        "‚Ä¢ –ì—Ä—É–ø–ø–∞: –í–ò13\n"
        "‚Ä¢ –§–ò–û: –ö–∞—Ä–ø–æ–≤ –°—Ç–µ–ø–∞–Ω –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ —Å–µ—Ä–≤–∏—Å–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é @Karpov_Stepan\n"
        "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤–∞—à—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é."
    )
    await update.message.reply_text(msg)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üì∑ –ü–æ–∏—Å–∫":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–∏—Ü–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
    elif text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        await show_profile(update, context)
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        await show_info(update, context)

async def quit_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == tg_id).first()
    if not user:
        await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        session.close()
        return

    await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å.")
    session.close()


# === –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
telegram_app.add_handler(CallbackQueryHandler(decision_callback))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
telegram_app.add_handler(CommandHandler("profile", show_profile))
telegram_app.add_handler(CommandHandler("info", show_info))
telegram_app.add_handler(CommandHandler("quit", quit_session))

menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[["üì∑ –ü–æ–∏—Å–∫", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]],
    resize_keyboard=True,
)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastAPI ===
@app.on_event("startup")
async def startup_event():
    import asyncio
    asyncio.create_task(telegram_app.run_polling(close_loop=False))
